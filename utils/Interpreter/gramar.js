/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,11],$V3=[1,14],$V4=[1,12],$V5=[1,15],$V6=[1,24],$V7=[1,22],$V8=[2,171],$V9=[1,31],$Va=[1,29],$Vb=[1,32],$Vc=[1,34],$Vd=[1,36],$Ve=[1,48],$Vf=[1,56],$Vg=[1,57],$Vh=[1,58],$Vi=[1,59],$Vj=[1,43],$Vk=[1,45],$Vl=[1,46],$Vm=[1,53],$Vn=[1,54],$Vo=[2,5,66,116,126,134,137],$Vp=[7,9,10,16,30,31,70,72,74,76,77,80,82,84,86,87,89,90,92,93,95,96,98,100,102,104,106,108,110,112,145,146,147,149,153,160],$Vq=[7,145,147,149,153,160],$Vr=[1,68],$Vs=[1,66],$Vt=[16,139],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[7,9,10,16,31,41,42,43,44,47,48,49,50,51,52,53,55,59,60,139,145,147,149,153,160],$Vz=[7,9,10,16,19,23,31,41,42,43,44,47,48,49,50,51,52,53,55,56,57,59,60,122,123,124,139,145,147,149,153,160],$VA=[1,90],$VB=[1,91],$VC=[1,97],$VD=[1,98],$VE=[7,31,59,60,145,147,149,153,160],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,103],$VN=[1,116],$VO=[1,124],$VP=[16,19],$VQ=[16,23],$VR=[16,31],$VS=[9,10,18,22,27,28,30,35,36,38,39],$VT=[7,16,153,160],$VU=[7,16,160],$VV=[7,9,10,16,31,41,44,47,48,49,50,51,52,53,55,59,60,139,145,147,149,153,160],$VW=[1,217],$VX=[1,218],$VY=[1,219],$VZ=[1,220],$V_=[1,221],$V$=[16,31,56,57,122,123,124],$V01=[2,73],$V11=[1,224],$V21=[2,71],$V31=[1,226],$V41=[16,30,31,56,57,122,123,124],$V51=[1,245],$V61=[7,16];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"PTCOMA":7,"JSONKEY":8,"IDENTIFICADOR":9,"CADENA":10,"JSONVALUE":11,"NATIVEEXPRESSION":12,"JSONPROPERTY":13,"DOSPTS":14,"JSONPROPERTIES":15,"COMA":16,"JSONOBJ":17,"LLAVEIZQ":18,"LLAVEDER":19,"JSONARRAYVALUES":20,"JSONARRAY":21,"CORIZQ":22,"CORDER":23,"JSONARRAYOBJECTSVALUES":24,"JSONARRAYOBJECTS":25,"OBJECTIDFUNCTIONINSTANCE":26,"RESOBJECTID":27,"RESOID":28,"OBJECTIDFUNCTION":29,"PARABRE":30,"PARCIERRA":31,"IDENTIFIER":32,"QUERYALIAS":33,"NATIVEIDENTIFIER":34,"NUMBER":35,"INTEGERNUMBER":36,"BOOLEANS":37,"RESTRUE":38,"RESFALSE":39,"ARITOPERATIONS":40,"SUMSIGN":41,"MULTSIGN":42,"DIVSIGN":43,"SUBSSIGN":44,"ARITEXPRESION":45,"RELATIONALOPERATIONS":46,"EQUALSTO":47,"NOTEQUALSTO":48,"DIFERENTTO":49,"GREATERTHAN":50,"GREATEREQUALSTHAN":51,"LESSTHAN":52,"LESSEQUALSTHAN":53,"RELAEXPRESION":54,"RESIS":55,"RESNOT":56,"RESNULL":57,"LOGICEXPRESION":58,"RESOR":59,"RESAND":60,"CREATETABLEINS":61,"CREATEDATABASE":62,"USEINS":63,"QUERY":64,"INSERTINSTRUCTION":65,"INVALID":66,"DOUBLEPARAMETER":67,"SINGLEPARAMETER":68,"VARCHARTYPE":69,"RESVARCHAR":70,"TEXTTYPE":71,"RESTEXT":72,"CHARTYPE":73,"RESCHAR":74,"INTEGERVALIDRES":75,"RESINT":76,"RESINTEGER":77,"INTTYPE":78,"BIGINTTYPE":79,"RESBIGINT":80,"SMALLINTTYPE":81,"RESMALLINT":82,"TINYINTTYPE":83,"RESTINYINT":84,"DECIMALTYPE":85,"RESDECIMAL":86,"RESNUMERIC":87,"FLOATTYPE":88,"RESFLOAT":89,"RESDOUBLE":90,"BOOLEANTYPE":91,"RESBOOLEAN":92,"RESBOOL":93,"DATETYPE":94,"RESDATE":95,"RESDATETIME":96,"TIMETYPE":97,"RESTIME":98,"TIMESTAMPTYPE":99,"RESTIMESTAMP":100,"BINARYTYPE":101,"RESBINARY":102,"VARBINARYTYPE":103,"RESVARBINARY":104,"BLOBTYPE":105,"RESBLOB":106,"CLOBTYPE":107,"RESCLOB":108,"XMLTYPE":109,"RESXML":110,"JSONTYPE":111,"RESJSON":112,"ARRAYTYPE":113,"RESARRAY":114,"DATATYPES":115,"RESCREATE":116,"RESTABLE":117,"CREATEPARAMS":118,"CREATEPARAM":119,"CREATEOPTIONS":120,"CREATEOPTION":121,"RESDEFAULT":122,"RESUNIQUE":123,"RESPRIMARY":124,"RESKEY":125,"RESINSERT":126,"RESINTO":127,"INSERTKEYS":128,"RESVALUES":129,"INSERTDATA":130,"INSERTREGISTER":131,"REGISTERVALUES":132,"RESDATABASE":133,"RESUSE":134,"SELECTINS":135,"OPTIONFROMJOIN":136,"RESSELECT":137,"QUERYPARAMS":138,"RESFROM":139,"LISTQUERYPARAMS":140,"QUERYPARAM":141,"JOINISTRUCTS":142,"OPTIONFROMWHERE":143,"JOINISTRUCT":144,"RESJOIN":145,"RESON":146,"RESWHERE":147,"OPTIONFROMGROUPBY":148,"RESGROUP":149,"RESBY":150,"GROUPBYPARAMS":151,"OPTIONFROMORDERBY":152,"RESORDER":153,"ORDERBYPARAMS":154,"OPTIONFROMLIMIT":155,"ORDERBYPARAM":156,"ORDERVALUE":157,"RESASC":158,"RESDESC":159,"RESLIMIT":160,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PTCOMA",9:"IDENTIFICADOR",10:"CADENA",14:"DOSPTS",16:"COMA",18:"LLAVEIZQ",19:"LLAVEDER",22:"CORIZQ",23:"CORDER",27:"RESOBJECTID",28:"RESOID",30:"PARABRE",31:"PARCIERRA",35:"NUMBER",36:"INTEGERNUMBER",38:"RESTRUE",39:"RESFALSE",41:"SUMSIGN",42:"MULTSIGN",43:"DIVSIGN",44:"SUBSSIGN",47:"EQUALSTO",48:"NOTEQUALSTO",49:"DIFERENTTO",50:"GREATERTHAN",51:"GREATEREQUALSTHAN",52:"LESSTHAN",53:"LESSEQUALSTHAN",55:"RESIS",56:"RESNOT",57:"RESNULL",59:"RESOR",60:"RESAND",66:"INVALID",70:"RESVARCHAR",72:"RESTEXT",74:"RESCHAR",76:"RESINT",77:"RESINTEGER",80:"RESBIGINT",82:"RESMALLINT",84:"RESTINYINT",86:"RESDECIMAL",87:"RESNUMERIC",89:"RESFLOAT",90:"RESDOUBLE",92:"RESBOOLEAN",93:"RESBOOL",95:"RESDATE",96:"RESDATETIME",98:"RESTIME",100:"RESTIMESTAMP",102:"RESBINARY",104:"RESVARBINARY",106:"RESBLOB",108:"RESCLOB",110:"RESXML",112:"RESJSON",114:"RESARRAY",116:"RESCREATE",117:"RESTABLE",122:"RESDEFAULT",123:"RESUNIQUE",124:"RESPRIMARY",125:"RESKEY",126:"RESINSERT",127:"RESINTO",129:"RESVALUES",133:"RESDATABASE",134:"RESUSE",137:"RESSELECT",139:"RESFROM",145:"RESJOIN",146:"RESON",147:"RESWHERE",149:"RESGROUP",150:"RESBY",153:"RESORDER",158:"RESASC",159:"RESDESC",160:"RESLIMIT"},
productions_: [0,[3,2],[4,3],[4,2],[8,1],[8,1],[11,1],[13,3],[15,3],[15,1],[17,3],[17,2],[20,3],[20,1],[21,3],[21,2],[24,3],[24,1],[25,3],[25,2],[26,1],[26,1],[29,4],[32,1],[33,1],[33,1],[34,1],[34,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[37,1],[37,1],[40,1],[40,1],[40,1],[40,1],[45,3],[45,3],[45,3],[45,3],[45,3],[45,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[54,3],[54,4],[54,3],[58,2],[58,3],[58,3],[58,1],[58,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[67,5],[67,0],[68,3],[68,0],[69,4],[71,1],[73,1],[75,1],[75,1],[78,2],[79,1],[81,1],[83,1],[85,2],[85,2],[88,2],[88,2],[91,1],[91,1],[94,1],[94,1],[97,2],[99,2],[101,1],[103,1],[105,1],[107,1],[109,1],[111,1],[113,4],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[61,6],[118,3],[118,1],[118,0],[119,3],[119,2],[120,2],[120,1],[121,2],[121,1],[121,2],[121,1],[121,2],[65,8],[65,6],[128,3],[128,1],[130,3],[130,1],[131,3],[132,3],[132,1],[62,3],[63,2],[64,2],[135,4],[138,1],[138,1],[140,3],[140,1],[141,2],[141,1],[136,2],[136,1],[142,2],[142,1],[144,5],[143,3],[143,1],[148,4],[148,1],[151,3],[151,1],[152,4],[152,1],[154,3],[154,1],[156,2],[157,1],[157,1],[157,0],[155,2],[155,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-2].push($$[$0-1]); this.$=$$[$0-2];
break;
case 3:
this.$=[$$[$0-1]];
break;
case 4: case 5: case 6: case 27: case 33: case 34: case 35: case 47: case 61: case 145: case 146:
this.$ = $$[$0];
break;
case 7:
this.$ = [$$[$0-2], $$[$0]];
break;
case 8:
this.$ = {...$$[$0-2], [$$[$0][0]]: $$[$0][1]};
break;
case 9:
this.$ = {[$$[$0][0]]: $$[$0][1]};
break;
case 10:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.JSONOBJ),$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 11:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.JSONOBJ),{}, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 12: case 16:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 13: case 17: case 148:
this.$ = [$$[$0]];
break;
case 14:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.JSONARR),$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 15: case 19:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.JSONARR),[], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 18:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.JSONARR),$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 22: case 46: case 62:
this.$ = $$[$0-1];
break;
case 23:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.IDENTIFICADOR),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 24:
this.$ = $$[$0].changeType(new Tipo.default(Tipo.DataType.ALIAS));
break;
case 25:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.ALIAS),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 26: case 31:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 28: case 29:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.NUMBER),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 30:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 32:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.OBJECTID),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 36:
this.$ = true;
break;
case 37:
this.$ = false;
break;
case 38:
this.$ = aritmetico.tipoOp.SUMA;
break;
case 39:
this.$ = aritmetico.tipoOp.MULTIPLICACION;
break;
case 40:
this.$ = aritmetico.tipoOp.DIVISION;
break;
case 41:
this.$ = aritmetico.tipoOp.RESTA;
break;
case 42:
this.$ = new aritmetico.default(aritmetico.tipoOp.SUMA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 43:
this.$ = new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 44:
this.$ = new aritmetico.default(aritmetico.tipoOp.DIVISION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 45:
this.$ = new aritmetico.default(aritmetico.tipoOp.RESTA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 48:
this.$ = relacional.tipoOp.EQUALS;
break;
case 49:
this.$ = relacional.tipoOp.NOTEQUALSTO;
break;
case 50:
this.$ = relacional.tipoOp.DIFERENTTO;
break;
case 51:
this.$ = relacional.tipoOp.GREATERTHAN;
break;
case 52:
this.$ = relacional.tipoOp.GREATEREQUALSTHAN;
break;
case 53:
this.$ = relacional.tipoOp.LESSTHAN;
break;
case 54:
this.$ = relacional.tipoOp.LESSEQUALSTHAN;
break;
case 55:
this.$ = new relacional.default($$[$0-1], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 56:
this.$ = new relacional.default(relacional.tipoOp.ISNOTNULL, $$[$0-3],$$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, undefined, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 57:
this.$ = new relacional.default(relacional.tipoOp.ISNULL, $$[$0-2],$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, undefined, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 58:
this.$ = new logica.default(logica.tipoOp.NOT, $$[$0-1], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 59:
this.$ = new logica.default(logica.tipoOp.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 60:
this.$ = new logica.default(logica.tipoOp.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63: case 64: case 65: case 66: case 67: case 126:
this.$=$$[$0];
break;
case 68:
 console.error('Este es un error léxico: ' + yytext + ', en la linea: ' + yylloc.first_line + ', en la columna: ' + yylloc.first_column); 
break;
case 69:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 100: case 101: case 116: case 117:
this.$={ bsonType: 'string' };
break;
case 102:
this.$={ bsonType: 'string', minLength: 1, maxLength: 1 };
break;
case 103:
this.$={ bsonType: 'int' };
break;
case 104:
this.$={ bsonType: 'long' };
break;
case 105:
this.$={ bsonType: 'int', minimum: -32768, maximum: 32767 };
break;
case 106:
this.$={ bsonType: 'int', minimum: 0, maximum: 255 };
break;
case 107:
this.$={ bsonType: 'decimal' };
break;
case 108:
this.$={ bsonType: 'double' };
break;
case 109:
this.$={ bsonType: 'bool' };
break;
case 110:
this.$={ bsonType: 'date' };
break;
case 111:
this.$={ bsonType: 'string', pattern: "^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$" };
break;
case 112:
this.$={ bsonType: 'timestamp' };
break;
case 113: case 114: case 115:
this.$={ bsonType: 'binData' };
break;
case 118:
this.$={ bsonType: 'object' };
break;
case 119:
this.$=new createCollection.default($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 120: case 134: case 136: case 139: case 147: case 160: case 164:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 121: case 135: case 137: case 140: case 154: case 161: case 165:
this.$=[$$[$0]];
break;
case 122:
this.$=[];
break;
case 123:
 this.$= {key: $$[$0-2], type: $$[$0-1], options: $$[$0]}; 
break;
case 124:
 this.$= {key: $$[$0-1], type: $$[$0]}; 
break;
case 125:
this.$={...$$[$0-1], ...$$[$0]};
break;
case 127:
this.$={required: true};
break;
case 128:
this.$={required: false};
break;
case 129:
this.$={default: $$[$0]};
break;
case 130:
this.$={unique: true};
break;
case 131:
this.$={index: true};
break;
case 132:
this.$=new insertInto.default($$[$0-5], $$[$0-3], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 133:
this.$=new insertInto.default($$[$0-3], undefined, $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 138:
this.$=$$[$0-1];
break;
case 141:
this.$=new createDatabase.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]);
break;
case 142:
this.$=new createDatabase.default(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 143:
$$[$0-1].setOptions($$[$0]); this.$=$$[$0-1];
break;
case 144:
this.$ = new select.default(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]);
break;
case 149:
this.$ = {base: $$[$0-1], alias: $$[$0]};
break;
case 150:
this.$ = {base: $$[$0]};
break;
case 151:
this.$ = {...$$[$0], join: $$[$0-1], isAggregate: true};
break;
case 152:
this.$ = {...$$[$0]};
break;
case 153:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 155:
this.$=new join.default(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-2], $$[$0]);
break;
case 156:
this.$={...$$[$0], where: $$[$0-1]};
break;
case 157: case 159: case 163:
this.$={...$$[$0]};
break;
case 158:
this.$={...$$[$0], groupBy: new groupBy.default(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]), isAggregate: true};
break;
case 162:
this.$={...$$[$0], orderBy: $$[$0-1]};
break;
case 166:
this.$={"key": $$[$0-1], "value": $$[$0]};
break;
case 167: case 169:
this.$=1;
break;
case 168:
this.$=-1;
break;
case 170:
this.$={limit:$$[$0]};
break;
case 171:
this.$={};
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,61:4,62:5,63:6,64:7,65:8,66:$V1,116:$V2,126:$V3,134:$V4,135:13,137:$V5},{1:[3]},{2:$V0,5:[1,16],6:17,61:4,62:5,63:6,64:7,65:8,66:$V1,116:$V2,126:$V3,134:$V4,135:13,137:$V5},{7:[1,18]},{7:[2,63]},{7:[2,64]},{7:[2,65]},{7:[2,66]},{7:[2,67]},{7:[2,68]},{7:[2,69]},{117:[1,19],133:[1,20]},{9:$V6,10:$V7,32:23,34:21},{7:$V8,136:25,142:26,143:27,144:28,145:$V9,147:$Va,148:30,149:$Vb,152:33,153:$Vc,155:35,160:$Vd},{127:[1,37]},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,42:[1,39],45:42,138:38,140:40,141:41},{1:[2,1]},{7:[1,60]},o($Vo,[2,3]),{9:$V6,10:$V7,32:23,34:61},{9:$V6,10:$V7,32:23,34:62},{7:[2,142]},o($Vp,[2,26]),o($Vp,[2,27]),o([7,9,10,16,19,23,30,31,41,42,43,44,47,48,49,50,51,52,53,55,56,57,59,60,70,72,74,76,77,80,82,84,86,87,89,90,92,93,95,96,98,100,102,104,106,108,110,112,122,123,124,139,145,146,147,149,153,160],[2,23]),{7:[2,143]},{7:$V8,143:63,144:64,145:$V9,147:$Va,148:30,149:$Vb,152:33,153:$Vc,155:35,160:$Vd},{7:[2,152]},o($Vq,[2,154]),{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vr,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:69,54:67,56:$Vs,58:65},{7:[2,157]},{9:$V6,10:$V7,32:23,34:70},{150:[1,71]},{7:[2,159]},{150:[1,72]},{7:[2,163]},{9:$V6,10:$Ve,12:73,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn},{9:$V6,10:$V7,32:23,34:74},{139:[1,75]},{139:[2,145]},{16:[1,76],139:[2,146]},o($Vt,[2,148]),o($Vt,[2,150],{33:77,32:82,9:$V6,10:[1,83],41:$Vu,42:$Vv,43:$Vw,44:$Vx}),{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:84},o($Vy,[2,47]),o($Vz,[2,28]),o($Vz,[2,29]),o($Vz,[2,30]),o($Vz,[2,31]),o($Vz,[2,32]),o($Vz,[2,33]),o($Vz,[2,34]),o($Vz,[2,35]),o($Vz,[2,36]),o($Vz,[2,37]),{30:[1,85]},{8:89,9:$VA,10:$VB,13:88,15:86,19:[1,87]},{9:$V6,10:$Ve,12:94,17:50,18:$Vf,20:92,21:51,22:$Vg,23:[1,93],26:55,27:$Vh,28:$Vi,29:49,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn},{30:[2,20]},{30:[2,21]},o($Vo,[2,2]),{30:[1,95]},{7:[2,141]},{7:[2,151]},o($Vq,[2,153]),{7:$V8,59:$VC,60:$VD,148:96,149:$Vb,152:33,153:$Vc,155:35,160:$Vd},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vr,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:69,54:67,56:$Vs,58:99},o($VE,[2,61]),{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vr,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:101,54:67,56:$Vs,58:100},{41:$Vu,42:$Vv,43:$Vw,44:$Vx,46:102,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM},{9:$V6,10:$V7,32:23,34:111},{9:$V6,10:$V7,32:23,34:113,151:112},{9:$VN,154:114,156:115},{7:[2,170]},{30:[1,117]},{9:$V6,10:$V7,32:23,34:118},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:42,141:119},o($Vt,[2,149]),{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:120},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:121},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:122},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:123},o($Vt,[2,24]),o($Vt,[2,25]),{31:$VO,41:$Vu,42:$Vv,43:$Vw,44:$Vx},{10:[1,125]},{16:[1,127],19:[1,126]},o($Vz,[2,11]),o($VP,[2,9]),{14:[1,128]},{14:[2,4]},{14:[2,5]},{16:[1,130],23:[1,129]},o($Vz,[2,15]),o($VQ,[2,13]),o($VR,[2,122],{32:23,118:131,119:132,34:133,9:$V6,10:$V7}),{7:[2,156]},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vr,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:69,54:67,56:$Vs,58:134},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vr,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:69,54:67,56:$Vs,58:135},o([7,31,145,147,149,153,160],[2,58],{59:$VC,60:$VD}),{31:[1,136],59:$VC,60:$VD},{31:$VO,41:$Vu,42:$Vv,43:$Vw,44:$Vx,46:102,47:$VF,48:$VG,49:$VH,50:$VI,51:$VJ,52:$VK,53:$VL,55:$VM},{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vj,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:137},{56:[1,138],57:[1,139]},o($VS,[2,48]),o($VS,[2,49]),o($VS,[2,50]),o($VS,[2,51]),o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),{146:[1,140]},{7:$V8,16:[1,142],152:141,153:$Vc,155:35,160:$Vd},o($VT,[2,161]),{7:$V8,16:[1,144],155:143,160:$Vd},o($VU,[2,165]),o($VU,[2,169],{157:145,158:[1,146],159:[1,147]}),{9:$V6,10:$V7,22:[1,151],25:149,32:23,34:150,128:148},o($Vq,[2,144]),o($Vt,[2,147]),o($VV,[2,42],{42:$Vv,43:$Vw}),o($Vy,[2,43]),o($Vy,[2,44]),o($VV,[2,45],{42:$Vv,43:$Vw}),o($Vy,[2,46]),{31:[1,152]},o($Vz,[2,10]),{8:89,9:$VA,10:$VB,13:153},{9:$V6,10:$Ve,11:154,12:155,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn},o($Vz,[2,14]),{9:$V6,10:$Ve,12:156,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn},{16:[1,158],31:[1,157]},o($VR,[2,121]),{69:160,70:[1,179],71:161,72:[1,180],73:162,74:[1,181],75:182,76:[1,202],77:[1,203],78:163,79:164,80:[1,183],81:165,82:[1,184],83:166,84:[1,185],85:167,86:[1,186],87:[1,187],88:168,89:[1,188],90:[1,189],91:169,92:[1,190],93:[1,191],94:170,95:[1,192],96:[1,193],97:171,98:[1,194],99:172,100:[1,195],101:173,102:[1,196],103:174,104:[1,197],105:175,106:[1,198],107:176,108:[1,199],109:177,110:[1,200],111:178,112:[1,201],115:159},o([7,31,59,145,147,149,153,160],[2,59],{60:$VD}),o($VE,[2,60]),o($VE,[2,62]),o($VE,[2,55],{41:$Vu,42:$Vv,43:$Vw,44:$Vx}),{57:[1,204]},o($VE,[2,57]),{9:$V6,10:$Ve,12:44,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,30:$Vr,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,45:69,54:67,56:$Vs,58:205},{7:[2,158]},{9:$V6,10:$V7,32:23,34:206},{7:[2,162]},{9:$VN,156:207},o($VU,[2,166]),o($VU,[2,167]),o($VU,[2,168]),{16:[1,209],31:[1,208]},{31:[1,210]},o($VR,[2,135]),{17:213,18:$Vf,23:[1,212],24:211},o($Vz,[2,22]),o($VP,[2,8]),o($VP,[2,7]),o($VP,[2,6]),o($VQ,[2,12]),{7:[2,119]},{9:$V6,10:$V7,32:23,34:133,119:214},o($VR,[2,124],{120:215,121:216,56:$VW,57:$VX,122:$VY,123:$VZ,124:$V_}),o($V$,[2,100]),o($V$,[2,101]),o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($V$,[2,109]),o($V$,[2,110]),o($V$,[2,111]),o($V$,[2,112]),o($V$,[2,113]),o($V$,[2,114]),o($V$,[2,115]),o($V$,[2,116]),o($V$,[2,117]),o($V$,[2,118]),{30:[1,222]},o($V$,[2,75]),o($V$,[2,76]),o($V$,$V01,{68:223,30:$V11}),o($V$,[2,80]),o($V$,[2,81]),o($V$,[2,82]),o($V$,$V21,{67:225,30:$V31}),o($V$,$V21,{67:227,30:$V31}),o($V$,$V01,{68:228,30:$V11}),o($V$,$V01,{68:229,30:$V11}),o($V$,[2,87]),o($V$,[2,88]),o($V$,[2,89]),o($V$,[2,90]),o($V$,$V01,{68:230,30:$V11}),o($V$,$V01,{68:231,30:$V11}),o($V$,[2,93]),o($V$,[2,94]),o($V$,[2,95]),o($V$,[2,96]),o($V$,[2,97]),o($V$,[2,98]),o($V41,[2,77]),o($V41,[2,78]),o($VE,[2,56]),o($Vq,[2,155],{59:$VC,60:$VD}),o($VT,[2,160]),o($VU,[2,164]),{129:[1,232]},{9:$V6,10:$V7,32:23,34:233},{7:[2,133]},{16:[1,235],23:[1,234]},{31:[2,19]},o($VQ,[2,17]),o($VR,[2,120]),o($VR,[2,123],{121:236,56:$VW,57:$VX,122:$VY,123:$VZ,124:$V_}),o($V$,[2,126]),{57:[1,237]},o($V$,[2,128]),{9:$V6,10:$Ve,12:238,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn},o($V$,[2,130]),{125:[1,239]},{36:[1,240]},o($V$,[2,79]),{36:[1,241]},o($V$,[2,83]),{36:[1,242]},o($V$,[2,84]),o($V$,[2,85]),o($V$,[2,86]),o($V$,[2,91]),o($V$,[2,92]),{30:$V51,130:243,131:244},o($VR,[2,134]),{31:[2,18]},{17:246,18:$Vf},o($V$,[2,125]),o($V$,[2,127]),o($V$,[2,129]),o($V$,[2,131]),{31:[1,247]},{31:[1,248]},{16:[1,249]},{7:[2,132],16:[1,250]},o($V61,[2,137]),{9:$V6,10:$Ve,12:252,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn,132:251},o($VQ,[2,16]),o($V$,[2,74]),o($V$,[2,72]),{36:[1,253]},{30:$V51,131:254},{16:[1,256],31:[1,255]},o($VR,[2,140]),{31:[1,257]},o($V61,[2,136]),o($V61,[2,138]),{9:$V6,10:$Ve,12:258,17:50,18:$Vf,21:51,22:$Vg,26:55,27:$Vh,28:$Vi,29:49,32:52,35:$Vk,36:$Vl,37:47,38:$Vm,39:$Vn},o($V$,[2,70]),o($VR,[2,139])],
defaultActions: {4:[2,63],5:[2,64],6:[2,65],7:[2,66],8:[2,67],9:[2,68],10:[2,69],16:[2,1],21:[2,142],25:[2,143],27:[2,152],30:[2,157],33:[2,159],35:[2,163],39:[2,145],58:[2,20],59:[2,21],62:[2,141],63:[2,151],73:[2,170],90:[2,4],91:[2,5],96:[2,156],141:[2,158],143:[2,162],157:[2,119],210:[2,133],212:[2,19],234:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const select = require('./models/Instructions/Select/Select')
    const join = require('./models/Instructions/Select/Join')
    const groupBy = require('./models/Instructions/Select/GroupBy/GroupBy')
    const nativo = require('./models/Expresions/Native');
    const aritmetico = require('./models/Expresions/Aritmetica');
    const relacional = require('./models/Expresions/Relacional');
    const createDatabase = require('./models/Instructions/CreateDatabase');
    const createCollection = require('./models/Instructions/CreateCollection');
    const insertInto = require('./models/Instructions/InsertInto');
    const logica = require('./models/Expresions/Logica');
    const Tipo = require('./models/Three/Type');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 60;
break;
case 1:return 114;
break;
case 2:return 158;
break;
case 3:return 80;
break;
case 4:return 102;
break;
case 5:return 93;
break;
case 6:return 92;
break;
case 7:return 106;
break;
case 8:return 150;
break;
case 9:return 116;
break;
case 10:return 74;
break;
case 11:return 108;
break;
case 12:return 133;
break;
case 13:return 95;
break;
case 14:return 96;    
break;
case 15:return 86;
break;
case 16:return 122;
break;
case 17:return 159;
break;
case 18:return 90;
break;
case 19:return 39;
break;
case 20:return 89;
break;
case 21:return 139;
break;
case 22:return 149;
break;
case 23:return 76;
break;
case 24:return 77;
break;
case 25:return 127;
break;
case 26:return 126;
break;
case 27:return 55;
break;
case 28:return 145;
break;
case 29:return 112;
break;
case 30:return 125;
break;
case 31:return 160;
break;
case 32:return 'RESMEDIUMBLOB';
break;
case 33:return 'RESMEDIUMTEXT';
break;
case 34:return 56;
break;
case 35:return 57;  
break;
case 36:return 87;
break;
case 37:return 146;   
break;
case 38:return 27;
break;
case 39:return 28;
break;
case 40:return 59;    
break;
case 41:return 153;
break;
case 42:return 124;
break;
case 43:return 137;
break;
case 44:return 82;
break;
case 45:return 117;
break;
case 46:return 72;
break;
case 47:return 98;
break;
case 48:return 100;
break;
case 49:return 84;
break;
case 50:return 38;  
break;
case 51:return 123;
break;
case 52:return 134;
break;
case 53:return 129;
break;
case 54:return 70;
break;
case 55:return 104;
break;
case 56:return 147;
break;
case 57:return 110;
break;
case 58:return 42;
break;
case 59:return 41;
break;
case 60:return 44;
break;
case 61:return 43;
break;
case 62:return 47;       
break;
case 63:return 48;    
break;
case 64:return 49;  
break;
case 65:return 51;
break;
case 66:return 53;
break;
case 67:return 50;
break;
case 68:return 52;
break;
case 69:return 18;
break;
case 70:return 19;
break;
case 71:return 14;
break;
case 72:return 16;
break;
case 73:return 7;
break;
case 74:return 30;
break;
case 75:return 31;
break;
case 76:return 22;
break;
case 77:return 23;
break;
case 78:;
break;
case 79:;
break;
case 80:;
break;
case 81:;
break;
case 82:;
break;
case 83: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 10; 
break;
case 84:return 35;
break;
case 85:return 36;
break;
case 86:return 9;
break;
case 87:return 'SIMPLEIDENTIFICADOR';
break;
case 88:return 5;
break;
case 89:return 66;
break;
}
},
rules: [/^(?:AND\b)/i,/^(?:ARRAY\b)/i,/^(?:ASC\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BOOL\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BLOB\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:CHAR\b)/i,/^(?:CLOB\b)/i,/^(?:DATABASE\b)/i,/^(?:DATE\b)/i,/^(?:DATETIME\b)/i,/^(?:DECIMAL\b)/i,/^(?:DEFAULT\b)/i,/^(?:DESC\b)/i,/^(?:DOUBLE\b)/i,/^(?:FALSE\b)/i,/^(?:FLOAT\b)/i,/^(?:FROM\b)/i,/^(?:GROUP\b)/i,/^(?:INT\b)/i,/^(?:INTEGER\b)/i,/^(?:INTO\b)/i,/^(?:INSERT\b)/i,/^(?:IS\b)/i,/^(?:JOIN\b)/i,/^(?:JSON\b)/i,/^(?:KEY\b)/i,/^(?:LIMIT\b)/i,/^(?:MEDIUMBLOB\b)/i,/^(?:MEDIUMTEXT\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NUMERIC\b)/i,/^(?:ON\b)/i,/^(?:OBJECTID\b)/i,/^(?:OID\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PRIMARY\b)/i,/^(?:SELECT\b)/i,/^(?:SMALLINT\b)/i,/^(?:TABLE\b)/i,/^(?:TEXT\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TINYINT\b)/i,/^(?:TRUE\b)/i,/^(?:UNIQUE\b)/i,/^(?:USE\b)/i,/^(?:VALUES\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARBINARY\b)/i,/^(?:WHERE\b)/i,/^(?:XML\b)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[/][/].*)/i,/^(?:[-][-].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*"|'[^\']*'|`[^\`]*`)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:[A-Za-z"_""$"]["_"0-9A-Za-z]*(\.["_"0-9A-Za-z]+)*)/i,/^(?:[A-Za-z"_""$"]["_"0-9A-Za-z]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramar;
exports.Parser = gramar.Parser;
exports.parse = function () { return gramar.parse.apply(gramar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}