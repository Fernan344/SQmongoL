/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,11],$V3=[1,14],$V4=[1,12],$V5=[1,15],$V6=[2,151],$V7=[1,29],$V8=[1,27],$V9=[1,30],$Va=[1,32],$Vb=[18,128],$Vc=[2,131],$Vd=[1,39],$Ve=[1,40],$Vf=[2,5,55,105,115,123,126],$Vg=[7,136,138,140,148],$Vh=[36,37,38,39,40,41,42],$Vi=[2,26],$Vj=[1,59],$Vk=[1,60],$Vl=[1,49],$Vm=[1,52],$Vn=[1,53],$Vo=[1,56],$Vp=[1,57],$Vq=[1,47],$Vr=[7,9,10,18,28,29,36,37,38,39,40,41,42,44,45,46,48,49,59,61,63,65,66,69,71,73,75,76,78,79,81,82,84,85,87,89,91,93,95,97,99,101,111,112,113,128,136,138,140,148],$Vs=[1,73],$Vt=[1,74],$Vu=[7,29,48,49,136,138,140,148],$Vv=[2,24],$Vw=[7,18,29,36,37,38,39,40,41,42,45,46,48,49,111,112,113,136,138,140,148],$Vx=[1,91],$Vy=[1,90],$Vz=[18,29],$VA=[7,9,10,25,26,29,30,31,33,34,48,49,136,138,140,148],$VB=[7,18,148],$VC=[2,149],$VD=[1,109],$VE=[1,110],$VF=[1,170],$VG=[1,171],$VH=[1,172],$VI=[1,173],$VJ=[1,174],$VK=[18,29,45,46,111,112,113],$VL=[2,54],$VM=[1,177],$VN=[2,52],$VO=[1,179],$VP=[18,28,29,45,46,111,112,113],$VQ=[1,196],$VR=[7,18];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"PTCOMA":7,"JSONKEY":8,"CADENA":9,"IDENTIFICADOR":10,"JSONVALUE":11,"ARITEXPRESION":12,"JSONOBJ":13,"JSONARRAY":14,"JSONPROPERTY":15,"DOSPTS":16,"JSONPROPERTIES":17,"COMA":18,"LLAVEIZQ":19,"LLAVEDER":20,"JSONARRAYVALUES":21,"CORDER":22,"CORIZQ":23,"OBJECTIDFUNCTIONINSTANCE":24,"RESOBJECTID":25,"RESOID":26,"OBJECTIDFUNCTION":27,"PARABRE":28,"PARCIERRA":29,"NUMBER":30,"INTEGERNUMBER":31,"BOOLEANS":32,"RESTRUE":33,"RESFALSE":34,"RELATIONALOPERATIONS":35,"EQUALSTO":36,"NOTEQUALSTO":37,"DIFERENTTO":38,"GREATERTHAN":39,"GREATEREQUALSTHAN":40,"LESSTHAN":41,"LESSEQUALSTHAN":42,"RELAEXPRESION":43,"RESIS":44,"RESNOT":45,"RESNULL":46,"LOGICEXPRESION":47,"RESOR":48,"RESAND":49,"CREATETABLEINS":50,"CREATEDATABASE":51,"USEINS":52,"QUERY":53,"INSERTINSTRUCTION":54,"INVALID":55,"DOUBLEPARAMETER":56,"SINGLEPARAMETER":57,"VARCHARTYPE":58,"RESVARCHAR":59,"TEXTTYPE":60,"RESTEXT":61,"CHARTYPE":62,"RESCHAR":63,"INTEGERVALIDRES":64,"RESINT":65,"RESINTEGER":66,"INTTYPE":67,"BIGINTTYPE":68,"RESBIGINT":69,"SMALLINTTYPE":70,"RESMALLINT":71,"TINYINTTYPE":72,"RESTINYINT":73,"DECIMALTYPE":74,"RESDECIMAL":75,"RESNUMERIC":76,"FLOATTYPE":77,"RESFLOAT":78,"RESDOUBLE":79,"BOOLEANTYPE":80,"RESBOOLEAN":81,"RESBOOL":82,"DATETYPE":83,"RESDATE":84,"RESDATETIME":85,"TIMETYPE":86,"RESTIME":87,"TIMESTAMPTYPE":88,"RESTIMESTAMP":89,"BINARYTYPE":90,"RESBINARY":91,"VARBINARYTYPE":92,"RESVARBINARY":93,"BLOBTYPE":94,"RESBLOB":95,"CLOBTYPE":96,"RESCLOB":97,"XMLTYPE":98,"RESXML":99,"JSONTYPE":100,"RESJSON":101,"ARRAYTYPE":102,"RESARRAY":103,"DATATYPES":104,"RESCREATE":105,"RESTABLE":106,"CREATEPARAMS":107,"CREATEPARAM":108,"CREATEOPTIONS":109,"CREATEOPTION":110,"RESDEFAULT":111,"RESUNIQUE":112,"RESPRIMARY":113,"RESKEY":114,"RESINSERT":115,"RESINTO":116,"INSERTKEYS":117,"RESVALUES":118,"INSERTDATA":119,"INSERTREGISTER":120,"REGISTERVALUES":121,"RESDATABASE":122,"RESUSE":123,"SELECTINS":124,"OPTIONFROMJOIN":125,"RESSELECT":126,"QUERYPARAMS":127,"RESFROM":128,"ASTERISCO":129,"LISTQUERYPARAMS":130,"QUERYPARAM":131,"QUERYALIAS":132,"JOINISTRUCTS":133,"OPTIONFROMWHERE":134,"JOINISTRUCT":135,"RESJOIN":136,"RESON":137,"RESWHERE":138,"OPTIONFROMORDERBY":139,"RESORDER":140,"RESBY":141,"ORDERBYPARAMS":142,"OPTIONFROMLIMIT":143,"ORDERBYPARAM":144,"ORDERVALUE":145,"RESASC":146,"RESDESC":147,"RESLIMIT":148,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PTCOMA",9:"CADENA",10:"IDENTIFICADOR",16:"DOSPTS",18:"COMA",19:"LLAVEIZQ",20:"LLAVEDER",22:"CORDER",23:"CORIZQ",25:"RESOBJECTID",26:"RESOID",28:"PARABRE",29:"PARCIERRA",30:"NUMBER",31:"INTEGERNUMBER",33:"RESTRUE",34:"RESFALSE",36:"EQUALSTO",37:"NOTEQUALSTO",38:"DIFERENTTO",39:"GREATERTHAN",40:"GREATEREQUALSTHAN",41:"LESSTHAN",42:"LESSEQUALSTHAN",44:"RESIS",45:"RESNOT",46:"RESNULL",48:"RESOR",49:"RESAND",55:"INVALID",59:"RESVARCHAR",61:"RESTEXT",63:"RESCHAR",65:"RESINT",66:"RESINTEGER",69:"RESBIGINT",71:"RESMALLINT",73:"RESTINYINT",75:"RESDECIMAL",76:"RESNUMERIC",78:"RESFLOAT",79:"RESDOUBLE",81:"RESBOOLEAN",82:"RESBOOL",84:"RESDATE",85:"RESDATETIME",87:"RESTIME",89:"RESTIMESTAMP",91:"RESBINARY",93:"RESVARBINARY",95:"RESBLOB",97:"RESCLOB",99:"RESXML",101:"RESJSON",103:"RESARRAY",105:"RESCREATE",106:"RESTABLE",111:"RESDEFAULT",112:"RESUNIQUE",113:"RESPRIMARY",114:"RESKEY",115:"RESINSERT",116:"RESINTO",118:"RESVALUES",122:"RESDATABASE",123:"RESUSE",126:"RESSELECT",128:"RESFROM",129:"ASTERISCO",136:"RESJOIN",137:"RESON",138:"RESWHERE",140:"RESORDER",141:"RESBY",146:"RESASC",147:"RESDESC",148:"RESLIMIT"},
productions_: [0,[3,2],[4,3],[4,2],[8,1],[8,1],[11,1],[11,1],[11,1],[15,3],[17,3],[17,1],[13,3],[13,2],[21,3],[21,1],[14,3],[14,2],[24,1],[24,1],[27,4],[12,1],[12,1],[12,1],[12,1],[12,1],[12,0],[32,1],[32,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[43,3],[43,4],[43,3],[47,2],[47,3],[47,3],[47,1],[47,3],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[56,5],[56,0],[57,3],[57,0],[58,4],[60,1],[62,1],[64,1],[64,1],[67,2],[68,1],[70,1],[72,1],[74,2],[74,2],[77,2],[77,2],[80,1],[80,1],[83,1],[83,1],[86,2],[88,2],[90,1],[92,1],[94,1],[96,1],[98,1],[100,1],[102,4],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[50,6],[107,3],[107,1],[107,0],[108,3],[108,2],[109,2],[109,1],[110,2],[110,1],[110,2],[110,1],[110,2],[54,8],[117,3],[117,1],[119,3],[119,1],[120,3],[121,3],[121,1],[51,3],[52,2],[53,2],[124,4],[127,1],[127,1],[130,3],[130,1],[132,1],[132,1],[131,0],[131,2],[131,1],[125,2],[125,1],[133,2],[133,1],[135,5],[134,3],[134,1],[139,4],[139,1],[142,3],[142,1],[144,2],[144,2],[145,1],[145,1],[145,0],[143,2],[143,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-2].push($$[$0-1]); this.$=$$[$0-2];
break;
case 3:
this.$=[$$[$0-1]];
break;
case 4: case 5: case 42: case 129: case 130:
this.$ = $$[$0];
break;
case 20: case 43:
this.$ = $$[$0-1];
break;
case 21: case 22:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.NUMBER),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 23:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 24:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.JSONKEY),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 25:
this.$ = new nativo.default(new Tipo.default(Tipo.DataType.OBJECTID),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 27:
this.$ = true;
break;
case 28:
this.$ = false;
break;
case 29:
this.$ = relacional.tipoOp.EQUALS;
break;
case 30:
this.$ = relacional.tipoOp.NOTEQUALSTO;
break;
case 31:
this.$ = relacional.tipoOp.DIFERENTTO;
break;
case 32:
this.$ = relacional.tipoOp.GREATERTHAN;
break;
case 33:
this.$ = relacional.tipoOp.GREATEREQUALSTHAN;
break;
case 34:
this.$ = relacional.tipoOp.LESSTHAN;
break;
case 35:
this.$ = relacional.tipoOp.LESSEQUALSTHAN;
break;
case 36:
this.$ = new relacional.default($$[$0-1], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 37:
this.$ = new relacional.default(relacional.tipoOp.ISNOTNULL, new nativo.default(new Tipo.default(Tipo.DataType.JSONKEY),$$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column), undefined, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 38:
this.$ = new relacional.default(relacional.tipoOp.ISNULL, new nativo.default(new Tipo.default(Tipo.DataType.JSONKEY),$$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column), undefined, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 39:
this.$ = new logica.default(logica.tipoOp.NOT, $$[$0-1], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 40:
this.$ = new logica.default(logica.tipoOp.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 41:
this.$ = new logica.default(logica.tipoOp.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 44: case 45: case 46: case 47: case 48: case 107:
this.$=$$[$0];
break;
case 49:
console.log("Error lexico");
break;
case 50:
console.log(`Error Sintactico`);
break;
case 81: case 82: case 97: case 98:
this.$={ bsonType: 'string' };
break;
case 83:
this.$={ bsonType: 'string', minLength: 1, maxLength: 1 };
break;
case 84:
this.$={ bsonType: 'int' };
break;
case 85:
this.$={ bsonType: 'long' };
break;
case 86:
this.$={ bsonType: 'int', minimum: -32768, maximum: 32767 };
break;
case 87:
this.$={ bsonType: 'int', minimum: 0, maximum: 255 };
break;
case 88:
this.$={ bsonType: 'decimal' };
break;
case 89:
this.$={ bsonType: 'double' };
break;
case 90:
this.$={ bsonType: 'bool' };
break;
case 91:
this.$={ bsonType: 'date' };
break;
case 92:
this.$={ bsonType: 'string', pattern: "^([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)$" };
break;
case 93:
this.$={ bsonType: 'timestamp' };
break;
case 94: case 95: case 96:
this.$={ bsonType: 'binData' };
break;
case 99:
this.$={ bsonType: 'object' };
break;
case 100:
this.$=new createCollection.default($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 101: case 114: case 116: case 119: case 127: case 143:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 102: case 115: case 117: case 120: case 137: case 144:
this.$=[$$[$0]];
break;
case 103:
this.$=[];
break;
case 104:
 this.$= {key: $$[$0-2], type: $$[$0-1], options: $$[$0]}; 
break;
case 105:
 this.$= {key: $$[$0-1], type: $$[$0]}; 
break;
case 106:
this.$={...$$[$0-1], ...$$[$0]};
break;
case 108:
this.$={required: true};
break;
case 109:
this.$={required: false};
break;
case 110:
this.$={default: $$[$0]};
break;
case 111:
this.$={unique: true};
break;
case 112:
this.$={index: true};
break;
case 113:
this.$=new insertInto.default($$[$0-5], $$[$0-3], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 118:
this.$=$$[$0-1];
break;
case 121:
this.$=new createDatabase.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])
break;
case 122:
this.$=new createDatabase.default(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0])
break;
case 123:
$$[$0-1].setOptions($$[$0]); this.$=$$[$0-1];
break;
case 124:
this.$ = new select.default(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]);
break;
case 125: case 126:
this.$ = $$[$0]
break;
case 128:
this.$ = [$$[$0]]
break;
case 132:
this.$ = {base: $$[$0-1], alias: $$[$0]};
break;
case 133:
this.$ = {base: $$[$0]};
break;
case 134:
this.$ = {...$$[$0], join: $$[$0-1]}
break;
case 135:
this.$= {...$$[$0]};
break;
case 136:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 138:

                                                                    this.$=new join.default(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-2], $$[$0]);   
                                                               
break;
case 139:
this.$={...$$[$0], where: $$[$0-1]}
break;
case 140: case 142:
this.$={...$$[$0]}
break;
case 141:
this.$={...$$[$0], orderBy: $$[$0-1]}
break;
case 145: case 146:
this.$={"key": $$[$0-1], "value": $$[$0]};
break;
case 147: case 149:
this.$=1;
break;
case 148:
this.$=-1;
break;
case 150:
this.$={limit:$$[$0]}
break;
case 151:
this.$={}
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,50:4,51:5,52:6,53:7,54:8,55:$V1,105:$V2,115:$V3,123:$V4,124:13,126:$V5},{1:[3]},{2:$V0,5:[1,16],6:17,50:4,51:5,52:6,53:7,54:8,55:$V1,105:$V2,115:$V3,123:$V4,124:13,126:$V5},{7:[1,18]},{7:[2,44]},{7:[2,45]},{7:[2,46]},{7:[2,47]},{7:[2,48]},{7:[2,49]},{7:[1,19]},{106:[1,20],122:[1,21]},{10:[1,22]},{7:$V6,125:23,133:24,134:25,135:26,136:$V7,138:$V8,139:28,140:$V9,143:31,148:$Va},{116:[1,33]},o($Vb,$Vc,{127:34,130:36,131:37,8:38,9:$Vd,10:$Ve,129:[1,35]}),{1:[2,1]},{7:[1,41]},o($Vf,[2,3]),{7:[2,50]},{8:42,9:$Vd,10:$Ve},{10:[1,43]},{7:[2,122]},{7:[2,123]},{7:$V6,134:44,135:45,136:$V7,138:$V8,139:28,140:$V9,143:31,148:$Va},{7:[2,135]},o($Vg,[2,137]),o($Vh,$Vi,{47:46,43:48,12:50,8:51,32:54,27:55,24:58,9:$Vd,10:$Ve,25:$Vj,26:$Vk,28:$Vl,30:$Vm,31:$Vn,33:$Vo,34:$Vp,45:$Vq}),{7:[2,140]},{10:[1,61]},{141:[1,62]},{7:[2,142]},{7:$Vi,8:64,9:$Vd,10:$Ve,12:63,24:58,25:$Vj,26:$Vk,27:55,30:$Vm,31:$Vn,32:54,33:$Vo,34:$Vp},{8:65,9:$Vd,10:$Ve},{128:[1,66]},{128:[2,125]},{18:[1,67],128:[2,126]},o($Vb,[2,128]),o($Vb,[2,133],{132:68,9:[1,70],10:[1,69]}),o($Vr,[2,4]),o($Vr,[2,5]),o($Vf,[2,2]),{28:[1,71]},{7:[2,121]},{7:[2,134]},o($Vg,[2,136]),{7:$V6,48:$Vs,49:$Vt,139:72,140:$V9,143:31,148:$Va},o($Vh,$Vi,{43:48,12:50,8:51,32:54,27:55,24:58,47:75,9:$Vd,10:$Ve,25:$Vj,26:$Vk,28:$Vl,30:$Vm,31:$Vn,33:$Vo,34:$Vp,45:$Vq}),o($Vu,[2,42]),o($Vh,$Vi,{43:48,12:50,8:51,32:54,27:55,24:58,47:76,9:$Vd,10:$Ve,25:$Vj,26:$Vk,28:$Vl,30:$Vm,31:$Vn,33:$Vo,34:$Vp,45:$Vq}),{35:77,36:[1,78],37:[1,79],38:[1,80],39:[1,81],40:[1,82],41:[1,83],42:[1,84]},o($Vh,$Vv,{44:[1,85]}),o($Vw,[2,21]),o($Vw,[2,22]),o($Vw,[2,23]),o($Vw,[2,25]),o($Vw,[2,27]),o($Vw,[2,28]),{28:[1,86]},{28:[2,18]},{28:[2,19]},{10:[1,87]},{9:$Vx,10:$Vy,142:88,144:89},{7:[2,150]},o([7,18,29,45,46,48,49,111,112,113,136,138,140,148],$Vv),{28:[1,92]},{8:93,9:$Vd,10:$Ve},o($Vb,$Vc,{8:38,131:94,9:$Vd,10:$Ve}),o($Vb,[2,132]),o($Vb,[2,129]),o($Vb,[2,130]),o($Vz,[2,103],{107:95,108:96,8:97,9:$Vd,10:$Ve}),{7:[2,139]},o($Vh,$Vi,{43:48,12:50,8:51,32:54,27:55,24:58,47:98,9:$Vd,10:$Ve,25:$Vj,26:$Vk,28:$Vl,30:$Vm,31:$Vn,33:$Vo,34:$Vp,45:$Vq}),o($Vh,$Vi,{43:48,12:50,8:51,32:54,27:55,24:58,47:99,9:$Vd,10:$Ve,25:$Vj,26:$Vk,28:$Vl,30:$Vm,31:$Vn,33:$Vo,34:$Vp,45:$Vq}),o([7,29,136,138,140,148],[2,39],{48:$Vs,49:$Vt}),{29:[1,100],48:$Vs,49:$Vt},o($Vu,$Vi,{32:54,27:55,24:58,8:64,12:101,9:$Vd,10:$Ve,25:$Vj,26:$Vk,30:$Vm,31:$Vn,33:$Vo,34:$Vp}),o($VA,[2,29]),o($VA,[2,30]),o($VA,[2,31]),o($VA,[2,32]),o($VA,[2,33]),o($VA,[2,34]),o($VA,[2,35]),{45:[1,102],46:[1,103]},{9:[1,104]},{137:[1,105]},{7:$V6,18:[1,107],143:106,148:$Va},o($VB,[2,144]),o($VB,$VC,{145:108,146:$VD,147:$VE}),o($VB,$VC,{145:111,146:$VD,147:$VE}),{8:113,9:$Vd,10:$Ve,117:112},o($Vg,[2,124]),o($Vb,[2,127]),{18:[1,115],29:[1,114]},o($Vz,[2,102]),{58:117,59:[1,136],60:118,61:[1,137],62:119,63:[1,138],64:139,65:[1,159],66:[1,160],67:120,68:121,69:[1,140],70:122,71:[1,141],72:123,73:[1,142],74:124,75:[1,143],76:[1,144],77:125,78:[1,145],79:[1,146],80:126,81:[1,147],82:[1,148],83:127,84:[1,149],85:[1,150],86:128,87:[1,151],88:129,89:[1,152],90:130,91:[1,153],92:131,93:[1,154],94:132,95:[1,155],96:133,97:[1,156],98:134,99:[1,157],100:135,101:[1,158],104:116},o([7,29,48,136,138,140,148],[2,40],{49:$Vt}),o($Vu,[2,41]),o($Vu,[2,43]),o($Vu,[2,36]),{46:[1,161]},o($Vu,[2,38]),{29:[1,162]},o($Vh,$Vi,{43:48,12:50,8:51,32:54,27:55,24:58,47:163,9:$Vd,10:$Ve,25:$Vj,26:$Vk,28:$Vl,30:$Vm,31:$Vn,33:$Vo,34:$Vp,45:$Vq}),{7:[2,141]},{9:$Vx,10:$Vy,144:164},o($VB,[2,145]),o($VB,[2,147]),o($VB,[2,148]),o($VB,[2,146]),{18:[1,166],29:[1,165]},o($Vz,[2,115]),{7:[2,100]},{8:97,9:$Vd,10:$Ve,108:167},o($Vz,[2,105],{109:168,110:169,45:$VF,46:$VG,111:$VH,112:$VI,113:$VJ}),o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),o($VK,[2,88]),o($VK,[2,89]),o($VK,[2,90]),o($VK,[2,91]),o($VK,[2,92]),o($VK,[2,93]),o($VK,[2,94]),o($VK,[2,95]),o($VK,[2,96]),o($VK,[2,97]),o($VK,[2,98]),o($VK,[2,99]),{28:[1,175]},o($VK,[2,56]),o($VK,[2,57]),o($VK,$VL,{57:176,28:$VM}),o($VK,[2,61]),o($VK,[2,62]),o($VK,[2,63]),o($VK,$VN,{56:178,28:$VO}),o($VK,$VN,{56:180,28:$VO}),o($VK,$VL,{57:181,28:$VM}),o($VK,$VL,{57:182,28:$VM}),o($VK,[2,68]),o($VK,[2,69]),o($VK,[2,70]),o($VK,[2,71]),o($VK,$VL,{57:183,28:$VM}),o($VK,$VL,{57:184,28:$VM}),o($VK,[2,74]),o($VK,[2,75]),o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,78]),o($VK,[2,79]),o($VP,[2,58]),o($VP,[2,59]),o($Vu,[2,37]),o($Vw,[2,20]),o($Vg,[2,138],{48:$Vs,49:$Vt}),o($VB,[2,143]),{118:[1,185]},{8:186,9:$Vd,10:$Ve},o($Vz,[2,101]),o($Vz,[2,104],{110:187,45:$VF,46:$VG,111:$VH,112:$VI,113:$VJ}),o($VK,[2,107]),{46:[1,188]},o($VK,[2,109]),o($VK,$Vi,{32:54,27:55,24:58,8:64,12:189,9:$Vd,10:$Ve,25:$Vj,26:$Vk,30:$Vm,31:$Vn,33:$Vo,34:$Vp}),o($VK,[2,111]),{114:[1,190]},{31:[1,191]},o($VK,[2,60]),{31:[1,192]},o($VK,[2,64]),{31:[1,193]},o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),o($VK,[2,72]),o($VK,[2,73]),{28:$VQ,119:194,120:195},o($Vz,[2,114]),o($VK,[2,106]),o($VK,[2,108]),o($VK,[2,110]),o($VK,[2,112]),{29:[1,197]},{29:[1,198]},{18:[1,199]},{7:[2,113],18:[1,200]},o($VR,[2,117]),o($Vz,$Vi,{32:54,27:55,24:58,8:64,121:201,12:202,9:$Vd,10:$Ve,25:$Vj,26:$Vk,30:$Vm,31:$Vn,33:$Vo,34:$Vp}),o($VK,[2,55]),o($VK,[2,53]),{31:[1,203]},{28:$VQ,120:204},{18:[1,206],29:[1,205]},o($Vz,[2,120]),{29:[1,207]},o($VR,[2,116]),o($VR,[2,118]),o($Vz,$Vi,{32:54,27:55,24:58,8:64,12:208,9:$Vd,10:$Ve,25:$Vj,26:$Vk,30:$Vm,31:$Vn,33:$Vo,34:$Vp}),o($VK,[2,51]),o($Vz,[2,119])],
defaultActions: {4:[2,44],5:[2,45],6:[2,46],7:[2,47],8:[2,48],9:[2,49],16:[2,1],19:[2,50],22:[2,122],23:[2,123],25:[2,135],28:[2,140],31:[2,142],35:[2,125],43:[2,121],44:[2,134],59:[2,18],60:[2,19],63:[2,150],72:[2,139],106:[2,141],114:[2,100]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const select = require('./models/Instructions/Select')
    const join = require('./models/Instructions/Join')
    const nativo = require('./models/Expresions/Native');
    const aritmetico = require('./models/Expresions/Aritmetica');
    const relacional = require('./models/Expresions/Relacional');
    const createDatabase = require('./models/Instructions/CreateDatabase');
    const createCollection = require('./models/Instructions/CreateCollection');
    const insertInto = require('./models/Instructions/InsertInto');
    const logica = require('./models/Expresions/Logica');
    const Tipo = require('./models/Three/Type');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 49;
break;
case 1:return 103;
break;
case 2:return 146;
break;
case 3:return 69;
break;
case 4:return 91;
break;
case 5:return 82;
break;
case 6:return 81;
break;
case 7:return 95;
break;
case 8:return 141;
break;
case 9:return 105;
break;
case 10:return 63;
break;
case 11:return 97;
break;
case 12:return 122;
break;
case 13:return 84;
break;
case 14:return 85;    
break;
case 15:return 75;
break;
case 16:return 111;
break;
case 17:return 147;
break;
case 18:return 79;
break;
case 19:return 34;
break;
case 20:return 78;
break;
case 21:return 128;
break;
case 22:return 65;
break;
case 23:return 66;
break;
case 24:return 116;
break;
case 25:return 115;
break;
case 26:return 44;
break;
case 27:return 136;
break;
case 28:return 101;
break;
case 29:return 114;
break;
case 30:return 148;
break;
case 31:return 'RESMEDIUMBLOB';
break;
case 32:return 'RESMEDIUMTEXT';
break;
case 33:return 45;
break;
case 34:return 46;  
break;
case 35:return 76;
break;
case 36:return 137;   
break;
case 37:return 25;
break;
case 38:return 26;
break;
case 39:return 48;    
break;
case 40:return 140;
break;
case 41:return 113;
break;
case 42:return 126;
break;
case 43:return 71;
break;
case 44:return 106;
break;
case 45:return 61;
break;
case 46:return 87;
break;
case 47:return 89;
break;
case 48:return 73;
break;
case 49:return 33;  
break;
case 50:return 112;
break;
case 51:return 123;
break;
case 52:return 118;
break;
case 53:return 59;
break;
case 54:return 93;
break;
case 55:return 138;
break;
case 56:return 99;
break;
case 57:return 129;
break;
case 58:return 36;       
break;
case 59:return 37;    
break;
case 60:return 38;  
break;
case 61:return 40;
break;
case 62:return 42;
break;
case 63:return 39;
break;
case 64:return 41;
break;
case 65:return 19;
break;
case 66:return 20;
break;
case 67:return 16;
break;
case 68:return 18;
break;
case 69:return 7;
break;
case 70:return 28;
break;
case 71:return 29;
break;
case 72:return 23;
break;
case 73:return 22;
break;
case 74:;
break;
case 75:;
break;
case 76:;
break;
case 77:;
break;
case 78:;
break;
case 79: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 9; 
break;
case 80:return 30;
break;
case 81:return 31;
break;
case 82:return 10;
break;
case 83:return 5;
break;
case 84:return 55
break;
}
},
rules: [/^(?:AND\b)/i,/^(?:ARRAY\b)/i,/^(?:ASC\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BOOL\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BLOB\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:CHAR\b)/i,/^(?:CLOB\b)/i,/^(?:DATABASE\b)/i,/^(?:DATE\b)/i,/^(?:DATETIME\b)/i,/^(?:DECIMAL\b)/i,/^(?:DEFAULT\b)/i,/^(?:DESC\b)/i,/^(?:DOUBLE\b)/i,/^(?:FALSE\b)/i,/^(?:FLOAT\b)/i,/^(?:FROM\b)/i,/^(?:INT\b)/i,/^(?:INTEGER\b)/i,/^(?:INTO\b)/i,/^(?:INSERT\b)/i,/^(?:IS\b)/i,/^(?:JOIN\b)/i,/^(?:JSON\b)/i,/^(?:KEY\b)/i,/^(?:LIMIT\b)/i,/^(?:MEDIUMBLOB\b)/i,/^(?:MEDIUMTEXT\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NUMERIC\b)/i,/^(?:ON\b)/i,/^(?:OBJECTID\b)/i,/^(?:OID\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:PRIMARY\b)/i,/^(?:SELECT\b)/i,/^(?:SMALLINT\b)/i,/^(?:TABLE\b)/i,/^(?:TEXT\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TINYINT\b)/i,/^(?:TRUE\b)/i,/^(?:UNIQUE\b)/i,/^(?:USE\b)/i,/^(?:VALUES\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARBINARY\b)/i,/^(?:WHERE\b)/i,/^(?:XML\b)/i,/^(?:\*)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[/][/].*)/i,/^(?:[-][-].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[^\"]*"|'[^\']*'|`[^\`]*`)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:\$?_?[A-Za-z]+["-""_"0-9A-Za-z]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramar;
exports.Parser = gramar.Parser;
exports.parse = function () { return gramar.parse.apply(gramar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}